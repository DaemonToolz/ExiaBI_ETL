//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BIP_ASPGUI.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IEtlService")]
    public interface IEtlService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetConnectors", ReplyAction="http://tempuri.org/IEtlService/GetConnectorsResponse")]
        int GetConnectors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetConnectors", ReplyAction="http://tempuri.org/IEtlService/GetConnectorsResponse")]
        System.Threading.Tasks.Task<int> GetConnectorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetEvents", ReplyAction="http://tempuri.org/IEtlService/GetEventsResponse")]
        string GetEvents(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetEvents", ReplyAction="http://tempuri.org/IEtlService/GetEventsResponse")]
        System.Threading.Tasks.Task<string> GetEventsAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetEventSize", ReplyAction="http://tempuri.org/IEtlService/GetEventSizeResponse")]
        int GetEventSize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetEventSize", ReplyAction="http://tempuri.org/IEtlService/GetEventSizeResponse")]
        System.Threading.Tasks.Task<int> GetEventSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetWarnings", ReplyAction="http://tempuri.org/IEtlService/GetWarningsResponse")]
        int GetWarnings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetWarnings", ReplyAction="http://tempuri.org/IEtlService/GetWarningsResponse")]
        System.Threading.Tasks.Task<int> GetWarningsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetErrors", ReplyAction="http://tempuri.org/IEtlService/GetErrorsResponse")]
        int GetErrors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetErrors", ReplyAction="http://tempuri.org/IEtlService/GetErrorsResponse")]
        System.Threading.Tasks.Task<int> GetErrorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetTransactions", ReplyAction="http://tempuri.org/IEtlService/GetTransactionsResponse")]
        int GetTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEtlService/GetTransactions", ReplyAction="http://tempuri.org/IEtlService/GetTransactionsResponse")]
        System.Threading.Tasks.Task<int> GetTransactionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEtlServiceChannel : BIP_ASPGUI.Service.IEtlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EtlServiceClient : System.ServiceModel.ClientBase<BIP_ASPGUI.Service.IEtlService>, BIP_ASPGUI.Service.IEtlService {
        
        public EtlServiceClient() {
        }
        
        public EtlServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EtlServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EtlServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EtlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetConnectors() {
            return base.Channel.GetConnectors();
        }
        
        public System.Threading.Tasks.Task<int> GetConnectorsAsync() {
            return base.Channel.GetConnectorsAsync();
        }
        
        public string GetEvents(int index) {
            return base.Channel.GetEvents(index);
        }
        
        public System.Threading.Tasks.Task<string> GetEventsAsync(int index) {
            return base.Channel.GetEventsAsync(index);
        }
        
        public int GetEventSize() {
            return base.Channel.GetEventSize();
        }
        
        public System.Threading.Tasks.Task<int> GetEventSizeAsync() {
            return base.Channel.GetEventSizeAsync();
        }
        
        public int GetWarnings() {
            return base.Channel.GetWarnings();
        }
        
        public System.Threading.Tasks.Task<int> GetWarningsAsync() {
            return base.Channel.GetWarningsAsync();
        }
        
        public int GetErrors() {
            return base.Channel.GetErrors();
        }
        
        public System.Threading.Tasks.Task<int> GetErrorsAsync() {
            return base.Channel.GetErrorsAsync();
        }
        
        public int GetTransactions() {
            return base.Channel.GetTransactions();
        }
        
        public System.Threading.Tasks.Task<int> GetTransactionsAsync() {
            return base.Channel.GetTransactionsAsync();
        }
    }
}
